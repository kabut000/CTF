import gmpy2
from Crypto.Util.number import long_to_bytes, bytes_to_long, getStrongPrime, inverse
from Crypto.Util.Padding import pad

n = 30004084769852356813752671105440339608383648259855991408799224369989221653141334011858388637782175392790629156827256797420595802457583565986882788667881921499468599322171673433298609987641468458633972069634856384101309327514278697390639738321868622386439249269795058985584353709739777081110979765232599757976759602245965314332404529910828253037394397471102918877473504943490285635862702543408002577628022054766664695619542702081689509713681170425764579507127909155563775027797744930354455708003402706090094588522963730499563711811899945647475596034599946875728770617584380135377604299815872040514361551864698426189453
e = 65537
e2 = 65539

enc = open("chal.enc", "rb").read()
f = open("chal.py", "rb").read()

s1 = bytes_to_long(enc[0:256]) ^ bytes_to_long(f[0:256])
s2 = bytes_to_long(enc[256:512]) ^ bytes_to_long(f[256:512])

x = pow(e, -1, e2)
y = (1 - x*e)//e2

m = pow(s1, x, n) * pow(s2, y, n) % n

print(long_to_bytes(m)[:97])

from Crypto.Util.number import *

load("coppersmith.sage")
n = 23087202318856030774680571525957068827041569782431397956837104908189620961469336659300387982516148407611623358654041246574100274275974799587138270853364165853708786079644741407579091918180874935364024818882648063256767259283714592098555858095373381673229188828791636142379379969143042636324982275996627729079
c = 3621516728616736303019716820373078604485184090642291670706733720518953475684497936351864366709813094154736213978864841551795776449242009307288704109630747654430068522939150168228783644831299534766861590666590062361030323441362406214182358585821009335369275098938212859113101297279381840308568293108965668609
e = 65537

P.<x> = PolynomialRing(Zmod(n), 1)
l = 27
s = b'CCTF{it_is_fake_flag_'
t = b'_90OD_luCk___!!}'
f = bytes_to_long(s) * 2**((l + len(t))*8) + x * 2**(len(t)*8) + bytes_to_long(t)
bounds = (2^(27*8), )
r = small_roots(f, bounds, m=10, d=10)
# r = [(35946296645795027706081981764759243051730930874638102982427961697,)]

rstr = s + long_to_bytes(int(r[0][0])) + t 
p = bytes_to_long(rstr)
q = n // p 
phi = (p-1)*(q-1)
d = pow(e, -1, phi)
flag = pow(c, d, n)
print(long_to_bytes(int(flag)))
